#ifndef RUNE_RTYPE_H
#define RUNE_RTYPE_H

#include <stdint.h>

#include "internal/types.h"

/* clang-format off */
enum [[clang::flag_enum]] general_category_bf : uint_fast32_t {
	GC_CN = 0,                 /* Not Assigned */
	GC_CC = UINT32_C(1) <<  0, /* Control */
	GC_CF = UINT32_C(1) <<  1, /* Format */
	GC_CO = UINT32_C(1) <<  2, /* Private Use */
	GC_CS = UINT32_C(1) <<  3, /* Surrogate */
	GC_LL = UINT32_C(1) <<  4, /* Lowercase Letter */
	GC_LM = UINT32_C(1) <<  5, /* Modifier Letter */
	GC_LO = UINT32_C(1) <<  6, /* Other Letter */
	GC_LT = UINT32_C(1) <<  7, /* Titlecase Letter */
	GC_LU = UINT32_C(1) <<  8, /* Uppercase Letter */
	GC_MC = UINT32_C(1) <<  9, /* Spacing Mark */
	GC_ME = UINT32_C(1) << 10, /* Enclosing Mark */
	GC_MN = UINT32_C(1) << 11, /* Nonspacing Mark */
	GC_ND = UINT32_C(1) << 12, /* Decimal Number */
	GC_NL = UINT32_C(1) << 13, /* Letter Number */
	GC_NO = UINT32_C(1) << 14, /* Other Number */
	GC_PC = UINT32_C(1) << 15, /* Connector Punctuation */
	GC_PD = UINT32_C(1) << 16, /* Dash Punctuation */
	GC_PE = UINT32_C(1) << 17, /* Close Punctuation */
	GC_PF = UINT32_C(1) << 18, /* Final Punctuation */
	GC_PI = UINT32_C(1) << 19, /* Initial Punctuation */
	GC_PO = UINT32_C(1) << 20, /* Other Punctuation */
	GC_PS = UINT32_C(1) << 21, /* Open Punctuation */
	GC_SC = UINT32_C(1) << 22, /* Currency Symbol */
	GC_SK = UINT32_C(1) << 23, /* Modifier Symbol */
	GC_SM = UINT32_C(1) << 24, /* Math Symbol */
	GC_SO = UINT32_C(1) << 25, /* Other Symbol */
	GC_ZL = UINT32_C(1) << 26, /* Line Separator */
	GC_ZP = UINT32_C(1) << 27, /* Paragraph Separator */
	GC_ZS = UINT32_C(1) << 28, /* Space Separator */

	GC_C  = GC_CC | GC_CF | GC_CN | GC_CO | GC_CS, /* Other */
	GC_L  = GC_LL | GC_LM | GC_LO | GC_LT | GC_LU, /* Letter */
	GC_LC = GC_LU | GC_LL | GC_LT,                 /* Cased Letter */
	GC_M  = GC_MC | GC_ME | GC_MN,                 /* Mark */
	GC_N  = GC_ND | GC_NL | GC_NO,                 /* Number */
	GC_P  = GC_PC | GC_PD | GC_PE | GC_PF | GC_PI  /* Punctuation */
	      | GC_PO | GC_PS,
	GC_S  = GC_SC | GC_SK | GC_SM | GC_SO,         /* Symbol */
	GC_Z  = GC_ZL | GC_ZP | GC_ZS,                 /* Separator */
};

enum [[clang::flag_enum]] joining_type_bf {
	JT_U = 0,      /* Non Joining */
	JT_C = 1 << 0, /* Join Causing */
	JT_D = 1 << 1, /* Dual Joining */
	JT_R = 1 << 3, /* Right Joining */
	JT_L = 1 << 2, /* Left Joining */
	JT_T = 1 << 4, /* Transparent */
};

enum joining_group {
	JG_NONE,
	JG_AFRICAN_FEH,
	JG_AFRICAN_NOON,
	JG_AFRICAN_QAF,
	JG_AIN,
	JG_ALAPH,
	JG_ALEF,
	JG_BEH,
	JG_BETH,
	JG_BURUSHASKI_YEH_BARREE,
	JG_DAL,
	JG_DALATH_RISH,
	JG_E,
	JG_FARSI_YEH,
	JG_FE,
	JG_FEH,
	JG_FINAL_SEMKATH,
	JG_GAF,
	JG_GAMAL,
	JG_HAH,
	JG_HANIFI_ROHINGYA_KINNA_YA,
	JG_HANIFI_ROHINGYA_PA,
	JG_HE,
	JG_HEH,
	JG_HEH_GOAL,
	JG_HETH,
	JG_KAF,
	JG_KAPH,
	JG_KHAPH,
	JG_KNOTTED_HEH,
	JG_LAM,
	JG_LAMADH,
	JG_MALAYALAM_BHA,
	JG_MALAYALAM_JA,
	JG_MALAYALAM_LLA,
	JG_MALAYALAM_LLLA,
	JG_MALAYALAM_NGA,
	JG_MALAYALAM_NNA,
	JG_MALAYALAM_NNNA,
	JG_MALAYALAM_NYA,
	JG_MALAYALAM_RA,
	JG_MALAYALAM_SSA,
	JG_MALAYALAM_TTA,
	JG_MANICHAEAN_ALEPH,
	JG_MANICHAEAN_AYIN,
	JG_MANICHAEAN_BETH,
	JG_MANICHAEAN_DALETH,
	JG_MANICHAEAN_DHAMEDH,
	JG_MANICHAEAN_FIVE,
	JG_MANICHAEAN_GIMEL,
	JG_MANICHAEAN_HETH,
	JG_MANICHAEAN_HUNDRED,
	JG_MANICHAEAN_KAPH,
	JG_MANICHAEAN_LAMEDH,
	JG_MANICHAEAN_MEM,
	JG_MANICHAEAN_NUN,
	JG_MANICHAEAN_ONE,
	JG_MANICHAEAN_PE,
	JG_MANICHAEAN_QOPH,
	JG_MANICHAEAN_RESH,
	JG_MANICHAEAN_SADHE,
	JG_MANICHAEAN_SAMEKH,
	JG_MANICHAEAN_TAW,
	JG_MANICHAEAN_TEN,
	JG_MANICHAEAN_TETH,
	JG_MANICHAEAN_THAMEDH,
	JG_MANICHAEAN_TWENTY,
	JG_MANICHAEAN_WAW,
	JG_MANICHAEAN_YODH,
	JG_MANICHAEAN_ZAYIN,
	JG_MEEM,
	JG_MIM,
	JG_NOON,
	JG_NUN,
	JG_NYA,
	JG_PE,
	JG_QAF,
	JG_QAPH,
	JG_REH,
	JG_REVERSED_PE,
	JG_ROHINGYA_YEH,
	JG_SAD,
	JG_SADHE,
	JG_SEEN,
	JG_SEMKATH,
	JG_SHIN,
	JG_STRAIGHT_WAW,
	JG_SWASH_KAF,
	JG_SYRIAC_WAW,
	JG_TAH,
	JG_TAW,
	JG_TEH_MARBUTA,
	JG_TEH_MARBUTA_GOAL,
	JG_TETH,
	JG_THIN_YEH,
	JG_VERTICAL_TAIL,
	JG_WAW,
	JG_YEH,
	JG_YEH_BARREE,
	JG_YEH_WITH_TAIL,
	JG_YUDH,
	JG_YUDH_HE,
	JG_ZAIN,
	JG_ZHAIN,
};
/* clang-format on */

[[unsequenced]] bool riscntrl(rune);
[[unsequenced]] bool risdigit(rune);
[[unsequenced]] bool risgraph(rune);
[[unsequenced]] bool rislower(rune);
[[unsequenced]] bool rismark(rune);
[[unsequenced]] bool risnumber(rune);
[[unsequenced]] bool rispunct(rune);
[[unsequenced]] bool risspace(rune);
[[unsequenced]] bool rissymbol(rune);
[[unsequenced]] bool ristitle(rune);
[[unsequenced]] bool risupper(rune);

[[unsequenced]] enum general_category_bf rprop_get_general_category(rune);
[[unsequenced]] enum joining_group rprop_get_joining_group(rune);
[[unsequenced]] enum joining_type_bf rprop_get_joining_type(rune);

/* Non-autogenerated rprop_is_*() functions */
[[unsequenced]] bool rprop_is_ascii_hex_digit(rune);
[[unsequenced]] bool rprop_is_ids_trinary_operator(rune);
[[unsequenced]] bool rprop_is_ids_unary_operator(rune);
[[unsequenced]] bool rprop_is_join_control(rune);
[[unsequenced]] bool rprop_is_noncharacter_code_point(rune);
[[unsequenced]] bool rprop_is_pattern_white_space(rune);

/* PROP PREDICATES START */
[[unsequenced]] bool rprop_is_alphabetic(rune);
[[unsequenced]] bool rprop_is_bidi_control(rune);
[[unsequenced]] bool rprop_is_bidi_mirrored(rune);
[[unsequenced]] bool rprop_is_case_ignorable(rune);
[[unsequenced]] bool rprop_is_cased(rune);
[[unsequenced]] bool rprop_is_changes_when_casefolded(rune);
[[unsequenced]] bool rprop_is_changes_when_casemapped(rune);
[[unsequenced]] bool rprop_is_changes_when_lowercased(rune);
[[unsequenced]] bool rprop_is_changes_when_nfkc_casefolded(rune);
[[unsequenced]] bool rprop_is_changes_when_titlecased(rune);
[[unsequenced]] bool rprop_is_changes_when_uppercased(rune);
[[unsequenced]] bool rprop_is_dash(rune);
[[unsequenced]] bool rprop_is_default_ignorable_code_point(rune);
[[unsequenced]] bool rprop_is_deprecated(rune);
[[unsequenced]] bool rprop_is_diacritic(rune);
[[unsequenced]] bool rprop_is_emoji(rune);
[[unsequenced]] bool rprop_is_emoji_component(rune);
[[unsequenced]] bool rprop_is_emoji_modifier(rune);
[[unsequenced]] bool rprop_is_emoji_modifier_base(rune);
[[unsequenced]] bool rprop_is_emoji_presentation(rune);
[[unsequenced]] bool rprop_is_extended_pictographic(rune);
[[unsequenced]] bool rprop_is_extender(rune);
[[unsequenced]] bool rprop_is_grapheme_base(rune);
[[unsequenced]] bool rprop_is_grapheme_extend(rune);
[[unsequenced]] bool rprop_is_hex_digit(rune);
[[unsequenced]] bool rprop_is_id_compat_math_continue(rune);
[[unsequenced]] bool rprop_is_id_compat_math_start(rune);
[[unsequenced]] bool rprop_is_id_continue(rune);
[[unsequenced]] bool rprop_is_id_start(rune);
[[unsequenced]] bool rprop_is_ideographic(rune);
[[unsequenced]] bool rprop_is_ids_binary_operator(rune);
[[unsequenced]] bool rprop_is_indic_conjunct_break(rune);
[[unsequenced]] bool rprop_is_logical_order_exception(rune);
[[unsequenced]] bool rprop_is_lowercase(rune);
[[unsequenced]] bool rprop_is_math(rune);
[[unsequenced]] bool rprop_is_pattern_syntax(rune);
[[unsequenced]] bool rprop_is_prepended_concatenation_mark(rune);
[[unsequenced]] bool rprop_is_quotation_mark(rune);
[[unsequenced]] bool rprop_is_radical(rune);
[[unsequenced]] bool rprop_is_regional_indicator(rune);
[[unsequenced]] bool rprop_is_sentence_terminal(rune);
[[unsequenced]] bool rprop_is_soft_dotted(rune);
[[unsequenced]] bool rprop_is_terminal_punctuation(rune);
[[unsequenced]] bool rprop_is_unified_ideograph(rune);
[[unsequenced]] bool rprop_is_uppercase(rune);
[[unsequenced]] bool rprop_is_variation_selector(rune);
[[unsequenced]] bool rprop_is_white_space(rune);
[[unsequenced]] bool rprop_is_xid_continue(rune);
[[unsequenced]] bool rprop_is_xid_start(rune);
/* PROP PREDICATES END */

#endif
