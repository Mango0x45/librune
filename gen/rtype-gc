#!/bin/sh

cache()
{
	name="/tmp/librune/rtype/$(basename "$1")"
	if test ! -f "$name"
	then
		mkdir -p /tmp/librune/rtype
		wget -q "$1" -O "$name"
	fi
}

set -e
cd "${0%/*}/.."
exec >include/internal/rtype/gc.h

readonly URL='https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt'
cache "$URL"

cat <<C
/* This file is autogenerated by gen/rtype-gc; DO NOT EDIT. */

#ifndef RUNE_INTERNAL_RTYPE_GC_H
#define RUNE_INTERNAL_RTYPE_GC_H

/* IWYU pragma: private */
/* clang-format off */

#include "../types.h"
#include "../../rtype.h"

static const rprop_gc_bf rtype_gc_lat1_tbl[] = {
C

gawk '
BEGIN {
	FS = ";"
}

{
	s = "GC_" toupper($3)
	lo = strtonum("0X" $1)

	if ($2 ~ /First/) {
		getline
		hi = strtonum("0X" $1)
	} else
		hi = lo

	for (i = lo; i <= hi; i++)
		props[i] = s
}

END {
	for (i = 0; i <= 0xFF; i++)
		print props[i] ","
}
' /tmp/librune/rtype/UnicodeData.txt \
| paste -d' ' - - - - - - - - \
| sed 's/^/\t/'

cat <<C
};

static const struct {
	rune lo, hi;
	rprop_gc_bf val;
} rtype_gc_tbl[] = {
C

gawk '
BEGIN {
	FS = ";"
}

{
	s = "GC_" toupper($3)
	lo = strtonum("0X" $1)

	if ($2 ~ /First/) {
		getline
		hi = strtonum("0X" $1)
	} else
		hi = lo

	for (i = lo; i <= hi; i++)
		props[i] = s
}

END {
	for (i = 0x100; i <= 0x10FFFF; i++) {
		if (!props[i])
			continue
		lo = i
		while (props[lo] == props[i + 1])
			i++
		printf "\t{0x%06X, 0x%06X, %s},\n", lo, i, props[lo]
	}
}
' /tmp/librune/rtype/UnicodeData.txt | sort

cat <<C
};

#endif /* !RUNE_INTERNAL_RTYPE_GC_H */
C
