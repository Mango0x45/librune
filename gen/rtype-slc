#!/bin/sh

cache()
{
	name="/tmp/librune/rtype/$(basename "$1")"
	if test ! -f "$name"
	then
		mkdir -p /tmp/librune/rtype
		wget -q "$1" -O "$name"
	fi
}

set -e
cd "${0%/*}/.."
exec >include/internal/rtype/slc.h

readonly URL='https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt'
cache "$URL"

cat <<C
/* This file is autogenerated by gen/rtype-slc; DO NOT EDIT. */

#ifndef RUNE_INTERNAL_RTYPE_SLC_H
#define RUNE_INTERNAL_RTYPE_SLC_H

/* IWYU pragma: private */
/* clang-format off */

#include "../common.h"
#include "../types.h"
#include "../../rtype.h"
#include "../../rune.h"

static const rune rtype_slc_lat1_tbl[] = {
C

gawk '
BEGIN {
	FS = ";"
}

{
	if ((n = strtonum("0X" $1)) > 0xFF)
		exit
	printf "0x%03X,\n", ($14 != "" ? strtonum("0X" $14) : n)
}
' /tmp/librune/rtype/UnicodeData.txt \
| paste -d' ' - - - - - - - - \
| sed 's/^/\t/'

cat <<C
};

static_assert(lengthof(rtype_slc_lat1_tbl) == LATIN1_MAX + 1);

static const struct {
	rune key, val;
} rtype_slc_tbl[] = {
C

gawk '
BEGIN {
	FS = ";"
}

$14 != "" {
	k = strtonum("0X" $1)
	v = strtonum("0X" $14)
	printf "\t{RUNE_C(0x%06X), RUNE_C(0x%06X)},\n", k, v
}
' /tmp/librune/rtype/UnicodeData.txt

cat <<C
};

#endif /* !RUNE_INTERNAL_RTYPE_SLC_H */
C
