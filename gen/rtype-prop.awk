BEGIN {
	FS = "( *#.*| +; +)"

	print "/* This file is autogenerated by gen/rtype-prop; DO NOT EDIT. */"
	print ""
	print "#include \"rtype.h\""
	print "#include \"rune.h\""
	print ""
	print "#include \"internal/bitset.h\""
	print ""
	print "/* clang-format off */"
	print ""
}

$2 == prop || (prop == "Indic_Conjunct_Break" && $2 ~ /InCB;/) {
	n = split($1, a, /\.\./)
	lo = strtonum("0x" a[1])
	hi = strtonum("0x" a[n])

	for (i = lo; i <= hi; i++)
		xs[i] = 1
}

END {
	if (word == "is") {
		for (i = 0; i <= 0xFF; i++) {
			if (xs[i])
				mask = or(mask, lshift(1, i))
		}
	}
	if (mask > 0) {
		print "static const uint64_t bitset[] = {"
		for (i = 0; i < 4; i++)
			printf "\tUINT64_C(0x%016X),\n", and(rshift(mask, 64 * i), 0xFFFFFFFFFFFFFFFF)
		print "};"
		print  ""
	}

	print "static const struct {"
	print "\trune lo, hi;"
	print "} lookup_tbl[] = {"

	for (i = 0x100; i <= 0x10FFFF; i++) {
		if (!xs[i])
			continue
		lo = i
		while (xs[i + 1])
			i++
		printf "\t{RUNE_C(0x%06X), RUNE_C(0x%06X)},\n", lo, i
	}

	print  "};"
	print  ""
	print  "#define TYPE      bool"
	print  "#define TABLE     lookup_tbl"
	print  "#define DEFAULT   false"
	print  "#define HAS_VALUE 0"
	print  "#include \"internal/rtype/lookup-func.h\""
	print  ""
	print  "bool"
	printf "rprop_%s_%s(rune ch)\n", word, short
	print  "{"
	if (mask > 0)
		print "\treturn ch <= LATIN1_MAX ? BSCHK(bitset, ch) : lookup(ch);"
	else
		print "\treturn lookup(ch);"
	print  "}"
}
